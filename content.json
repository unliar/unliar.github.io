[{"title":"怎样以正确的姿势安装mongodb,并且用Node搭建登录页","date":"2017-01-12T10:54:18.000Z","path":"2017/01/12/how-to-install-mongodb/","text":"这篇文章主要是来讲如何用mongodb+node+express+mongoose来搭建一个简单的登录页。完整目录在 git 1.安装mongodb,非关系型数据库。以windows为例,去官网下载安装包,选择你要的版本，然后像安装软件一样下一步，下一步，安装完成之后去安装目录的bin目录下双击mongod.exe或者控制台输入mongod,不出意外,肯定会出错,怎么办呢？解决方法就是在你安装盘比如D盘下新建 data/db/ 的目录，然后命令行中输入mongo,如果没有被出错并且输出了版本,就说明安装成功了,数据库默认地址是127.0.0.1:3000。当然也可以用 mongod –dbpath=d:/1111111/database/data 命令指定特定的路径,你可以自行修改，或者参考官网说明,这里不展开。 2.可视化工具.为了只管展示数据,而不是看黑框框命令行界面，可以选择下载Robomongo 可视化mongodb数据库工具 3.安装express+静态生成器+mongoose，express用法可在exress中查看, npm install express-generator -g npm install express -g npm install mongoose -g 4.建立项目目录,安装依赖 express website cd website npm install 5.修改配置 ,下面是我的实例一 、app.js 根配置文件 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647var express = require('express');var path = require('path');var favicon = require('serve-favicon');var logger = require('morgan');var cookieParser = require('cookie-parser');var bodyParser = require('body-parser');var index = require('./routes/index');var app = express();app.set('views', path.join(__dirname, 'views'));app.set('view engine', 'jade');app.all(function(req, res, next) &#123; res.header(\"Access-Control-Allow-Origin\", \"*\"); next(); &#125;) app.use(logger('dev'));app.use(bodyParser.json());app.use(bodyParser.urlencoded(&#123; extended: false &#125;));app.use(cookieParser());app.use(express.static(path.join(__dirname, 'public')));//路由配置在 './routes/index'app.use('/', index);//设置静态资源目录www用来存放前端html页面app.use(express.static('www'));app.use(function(req, res, next) &#123; var err = new Error('Not Found'); err.status = 404; next(err);&#125;);app.use(function(err, req, res, next) &#123; res.locals.message = err.message; res.locals.error = req.app.get('env') === 'development' ? err : &#123;&#125;; res.status(err.status || 500); res.render('error');&#125;);module.exports = app; 二 、’./routes/index’ 路由规则 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061var express = require('express');var router = express.Router();var mongoose = require('mongoose');var database = require('../model/database.js')var bodyParser = require('body-parser');//数据库连接mongoose.connect('mongodb://127.0.0.1:27017/web')var db = mongoose.connection;//数据库连接信息db.on('error', console.error.bind(console, 'connection error'));db.once('open', function() &#123; console.log('mongoose is connecting with your mongodb') &#125;)//首页路由重定向到静态资源目录router.get('/', function(req, res, next) &#123; res.redirect('/index.html')&#125;);//处理post请求,router.post('/login', function(req, res, next) &#123; console.log(\"用户名:\" + req.body.name)//req.body 因为post请求的data在body里，如果是get用req.params var name = req.body.name; var pass = req.body.pass;//数据库查询方法查询是否匹配到用户名和密码//res.json()可以返回一个json对象 database.findOne(&#123; \"name\": name &#125;, function(error, results) &#123; if (error) &#123; console('查询出错') &#125; else if (!results) &#123; res.json(&#123; 'err': \"wrongname\", 'status': \"err\", 'body': req.body &#125;) &#125; else if (pass != results.pass) &#123; res.json(&#123; 'err': \"wrongpass\", 'status': \"err\", 'body': req.body &#125;) &#125; else &#123; console.log(\"登录成功\") res.json(&#123; 'status': \"ok\", 'err': 'no', 'body': req.body &#125;) &#125; &#125;)&#125;)module.exports = router;``` 三 、''../model/database.js''数据库模型 var mongoose = require(‘mongoose’);var Schema = mongoose.Schema; var mylogin = new Schema({ name: { type: String, unique: true }, pass: { type: Number, default: 789654 }}) var login = mongoose.model(‘hello’, mylogin)module.exports = login``` 然后就是前端的HTML发送请求了 应该都会写的对不对~ 这样我们就完成了一个简单的 前端登录+后台返回请求的实例,还是不太难的。多熟悉express+mongoose+Node学习起来不难。 参考资料：mongodbexpress","tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"//unliar.com/tags/JavaScript/"},{"name":"Node","slug":"Node","permalink":"//unliar.com/tags/Node/"},{"name":"mongodb","slug":"mongodb","permalink":"//unliar.com/tags/mongodb/"},{"name":"mongoose","slug":"mongoose","permalink":"//unliar.com/tags/mongoose/"},{"name":"express","slug":"express","permalink":"//unliar.com/tags/express/"}]},{"title":"Welcome To 2017 !","date":"2016-12-31T16:00:00.000Z","path":"2017/01/01/2016ToTheEnd/","text":"2016年又到了年尾，又要马不停蹄的奔向未来了。 2016年，总结来说就是 失败。 四月，辞去第一份工作，却没找到自己十分满意的工作，期间还把自己脚给弄伤上了手术台。 十一月，第二份工作辞职时，也没好利索，眼睛也得了麦粒肿… 十二月，第三份工作找了一个月也没找到自己喜欢的，想着眼睛快点好，结果哪里都没好。脚伤依旧未愈，眼睛还是肿的不能见人。 没什么值得让我高兴的，伤病一直不断，，自己瞎琢磨学的东西完全在我的工作甚至未来都像是派不上用场。找工作一直也不是很顺利…至于人际关系，呵呵呵，还是那个水平…我已经考虑过自己能否接受最坏的结果了。 尽管这样，还是没有像以前一样那么快陷入负面情绪中无法自拔，我始终相信自己存在在这个世界上的价值不止于他人想象中而已。好想实现自己之前对室友说过的话：找一份能够看到自己改变的工作。我希望看到改变，而不是无聊的重复每一天。我特意去做的大部分事情都会有最坏的打算，而至少在现在，我根本没把过一个将就的生活当做我的最后选择。等我死心吧．．． Targets in 2017 我姐姐在今后的婚姻里能够幸福~ 我表哥的病能顺利好转 父母家人顺利安康 能顺利找到我喜欢的工作 世界和平 Bless You 我的2017会是怎样呢？","tags":[{"name":"BE","slug":"BE","permalink":"//unliar.com/tags/BE/"},{"name":"For The Future","slug":"For-The-Future","permalink":"//unliar.com/tags/For-The-Future/"},{"name":"2016","slug":"2016","permalink":"//unliar.com/tags/2016/"}]},{"title":"一道bilibili兴趣圈入群JavaScript题","date":"2016-09-05T07:51:41.000Z","path":"2016/09/05/9-05-js/","text":"代码如下： 1234567891011121314151617181920212223242526&lt;script type=\"text/javascript\"&gt; //二、\"use strict\"; var question = \"wtf\"; //二、var objB; (function() &#123; //立即调用模式 question = \"wtf???\"; //改变了全局变量question var objA = objB = &#123; //objB 未声明，因此会隐性声明一个全局变量objB,然后赋值给objA; question: \"wtf\", then: &#123; question: \"with this question???\", print: function() &#123; var question = \"i love js \"; console.log(this.question);//二、this 严格模式不能指向全局对象，window.question &#125; &#125; &#125;; var print = function() &#123; var question = \"i love js me tooo\"; console.log(this.question) &#125;; &#125;)(); var then = objB.then.print; //print中的this指向作用域中的question,objB为全局变量 ，所以输出为wtf??? then();&lt;/script&gt; 1,写出输出值； 我的答案： 立即调用函数改变了全局变量question为wtf？？？； objB 未声明，因此会隐性声明一个全局变量objB,然后赋值给objA; objB.then.print中的this指向作用域中的question,objB为全局变量 ，所以输出为wtf??? 2，严格模式如何修改； 严格模式中，必须先声明变量，this不能指向全局对象，所以声明全局变量，并且更改this.question为window.question： …………………………………………………………………………………………………………………………………..3，个人收获之前一直不懂两个等号的意思，通过这个题目，稍微了解了下，一次是赋值，一次是引用。个人理解~ var objA = objB ={}； objB隐性声明为全局变量并且赋值，而objA则是对objB的一次引用； 以及函数作用域的问题，JavaScript高级程序设计的确是一本好书，哈哈哈。","tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"//unliar.com/tags/JavaScript/"},{"name":"bilibili","slug":"bilibili","permalink":"//unliar.com/tags/bilibili/"}]},{"title":"Vue.js+vue-router","date":"2016-09-05T07:51:41.000Z","path":"2016/09/05/20161010-VueStart/","text":"一、安装(npm) 1、安装相关包12345npm install npm //更新npm到最新版npm install -g cnpm --registry=https://registry.npm.taobao.org //安装淘宝镜像cnpmcnpm install vue //安装vuecnpm install webpack //安装webpackcnpm install -g vue-cli //全局安装vue-cli 2、切换到你想放置项目的目录123vue init webpack projectname //创建项目[projectname]cnpm install //安装依赖cnpm install vue-router //安装vue-router 3、修改配置在src目录下找到main.js,在new Vue（）前添加如下代码12import VueRouter from 'vue-router' //引入vue-routerVue.use(VueRouter) //安装 4、定义路由在添加的代码下开始定义路由，以下是一个完整的示例123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657import Vue from 'vue'import App from './App'/*引入路由*/import VueRouter from 'vue-router'Vue.use(VueRouter)/*定义路由设置*///引入组件import Hello from 'components/Hello.vue' import Sx from 'components/sx.vue'import Sb from 'components/sb.vue'import Ssr from 'components/ssr.vue'import Ssx from 'components/ssx.vue'//路由设置const myRouter = new VueRouter(&#123; routes: [&#123; path: \"/\", component: Hello &#125;, &#123; path: \"/sx\", component: Sx &#125;, &#123; path:'/sb', component:Sb &#125;, &#123; path:'/ssr', component:Ssr &#125;,&#123; path:'/ssx/:id', component:Ssx &#125; ] &#125;) new Vue(&#123; el: '#app', template: '&lt;App/&gt;', components: &#123; App, Hello, Sx, Sb, Ssr, Ssx &#125;, router: myRouter //挂载路由&#125;) 5、在app.vue下添加相应路由标签12345678&lt;router-link to='/' exact &gt;index&lt;/router-link&gt;&lt;router-link to='/sx' exact &gt;sx&lt;/router-link&gt;&lt;router-link to='/sb' exact &gt;sb&lt;/router-link&gt;&lt;router-link to='/ssr' exact &gt;ssr&lt;/router-link&gt;&lt;router-link to='/ssx/bilibili' exact &gt;这是bilibili&lt;/router-link&gt;&lt;router-link to='/ssx/acfun' exact &gt;这是acfun&lt;/router-link&gt;&lt;router-view&gt;&lt;/router-view&gt; 6、启动实时预览或者打包12cnpm run dev //开发环境预览cnpm run build //打包到生产环境html css js 7、建议1，建议看过vue官方的教程再查看本示例。2，可以先不通过npm学习相关vue的内容，再逐步转换到npm方式上。3，仔细看官方教程，vue:https://cn.vuejs.org/","tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"//unliar.com/tags/JavaScript/"},{"name":"Vue.js","slug":"Vue-js","permalink":"//unliar.com/tags/Vue-js/"},{"name":"Vue-router","slug":"Vue-router","permalink":"//unliar.com/tags/Vue-router/"},{"name":"MVVM","slug":"MVVM","permalink":"//unliar.com/tags/MVVM/"}]},{"title":"屏蔽某度商业推广信息","date":"2016-07-25T12:57:02.000Z","path":"2016/07/25/killAD/","text":"看见一个某乎论坛里说火狐里可以用脚本屏蔽百度推广的广告位，心生好奇，别人用JavaScript可以做到的事情为什么我不可以？于是今天下班后，随便看了看，发现超级简单。 首先，去firefox的插件里下载：Greasemonkey插件，重启浏览器，这个插件可以再指定网址挂载js脚本。 然后我们就开始视奸百度的推广位吧，随便搜索一个带有推广的关键词，比如“整容”，右键查看元素，结果发现，哦豁，id=“3001”到id=“3004”都是推广，嘻嘻这样就简单多了，写完之后发现搜索其他关键词还有推广没有没被屏蔽，老方法，查看你推广信息，发现id=“4001”到id=“4004”都是推广，这样我们就可以开始屏蔽之旅了。 打开插件界面-用户脚本=新建脚本：先不设置应用到哪个网址，脚本写好之后再填。匹配如下页面： https://www.baidu.com/* http://www.baidu.com/* http://baidu.com/* 代码如下：定时器 防失效……//看到初次写的那么丑是在忍不住改了一波：version 2.0数组为广告div的ID 12345678910111213141516171819arrid=[\"3001\",\"3002\",\"3003\",\"3004\",\"4001\",\"4002\",\"4003\",\"4004\"];function killAD(arrid)&#123; arrid.forEach(function(v)&#123; var obj=\"AD\"+v; obj=document.getElementById(v)||false; if (obj!==false) &#123; obj.setAttribute(\"style\",\"display: none;visibility: hidden;\") &#125; console.log(\"run\") &#125;)&#125;window.onload=function()&#123; setInterval(function()&#123; killAD(arrid); &#125;,1000) &#125; 初次写的:version 1.01234567891011121314151617181920212223242526272829303132333435363738window.onload = function () &#123; setInterval(function()&#123; console.log(\"runclose\") var AD1 = document.getElementById('3001') || false; var AD2 = document.getElementById('3002') || false; var AD3 = document.getElementById('3003') || false; var AD4 = document.getElementById('3004') || false; var AD5 = document.getElementById('4001') || false; var AD6 = document.getElementById('4002') || false; var AD7 = document.getElementById('4003') || false; var AD8 = document.getElementById('4004') || false; if (AD7 !== false) &#123; AD7.setAttribute('style', 'display: none;visibility: hidden;'); &#125; if (AD8 !== false) &#123; AD8.setAttribute('style', 'display: none;visibility: hidden;'); &#125; if (AD6 !== false) &#123; AD6.setAttribute('style', 'display: none;visibility: hidden;'); &#125; if (AD5 !== false) &#123; AD5.setAttribute('style', 'display: none;visibility: hidden;'); &#125; if (AD1 !== false) &#123; AD1.setAttribute('style', 'display: none;visibility: hidden;'); &#125;; if (AD2 !== false) &#123; AD2.setAttribute('style', 'display: none;visibility: hidden;'); &#125; if (AD3 !== false) &#123; AD3.setAttribute('style', 'display: none;visibility: hidden;'); &#125; if (AD4 !== false) &#123; AD4.setAttribute('style', 'display: none;visibility: hidden;'); &#125;; &#125;,1000) &#125; 效果大概就是下面的样子，百度：“咦，我的广告咧”！","tags":[{"name":"javasciprt","slug":"javasciprt","permalink":"//unliar.com/tags/javasciprt/"},{"name":"code","slug":"code","permalink":"//unliar.com/tags/code/"},{"name":"Greasemonkey","slug":"Greasemonkey","permalink":"//unliar.com/tags/Greasemonkey/"}]},{"title":"Notification实例","date":"2016-07-16T12:20:00.000Z","path":"2016/07/16/Notification/","text":"www.unliar.com; HTML5 Notificaton桌面通知，实现的效果就是，在电脑右下角的出现类似于qq邮箱收信提示的效果，不过只支持最新的chrome、firefox，手机端firefox浏览器和UC浏览器可以实现，效果类似于通知栏效果。具体效果如图： 下面是一个简单的实例： 第一步：判断浏览器支持； 第二步：向用户大爷请求通知权限； 第三步：就是创建桌面通知实例；(我在实际的应用中是用来查看某些数据是否更改，满足条件则会创建实例，并且延时关闭，我想应该可以用来做更加有趣的事情，) 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130 window.onload = function() &#123; var btnClick = document.getElementById(\"btnQuery\"); var httpTarget = \"http://7xtby5.com1.z0.glb.clouddn.com/%E6%8A%B1.jpg\"; //图标，可以修改，必须双引号 startNotification = function() &#123; console.log(\"run\"); console.log(getTasknum(2)); if(checkAvailue() == \"passed\") &#123; if(checkSee() == \"seed\") &#123; document.title = \"已在业务页面，通知停止\"; &#125;; if(checkSee() == \"hided\") &#123; //当用户不在看页面时才模拟点击，检测任务量； document.title = \"任务量\"+getText; btnClick.click(); setTimeout(function()&#123; if(getTasknum(2)==\"danger\") &#123;//业务警戒值，默认2，可修改 document.title = \"任务量为\" +getText; createMsg(\"Hello 你的任务量已经累积啦\", new Date().getHours() + \"时\" + new Date().getMinutes() + \"分\" + \"任务量☞(๑•ั็ω•็ั๑)☞\" + getText, httpTarget); &#125;; &#125;,2000) &#125; &#125;; &#125;; timers = setInterval(startNotification, 60000) //延时刷新业务-----1000=1秒，不建议修改为过低值，默认60秒，可以自行修改； createButton(\"closeButton\", \"openButton\");&#125;;//检测浏览器支持+检测用户许可function checkAvailue() &#123; var winNoti = window.Notification; if(winNoti) &#123; winNoti.requestPermission(); &#125; if(winNoti.permission == \"granted\") &#123; return \"passed\" &#125;&#125;;//获取业务数据function getTasknum(dangerNum) &#123; //业务量警戒值 getText = document.getElementById(\"ywrecordcount\").innerText; var getTextNum = getText.replace(/[^0-9]/gi, ''); if(getTextNum &gt;= dangerNum) &#123; return \"danger\" //返回任务量 &#125;&#125;;//检测用户是否浏览当前页function checkSee() &#123; if(document.hidden) &#123; return \"hided\"; &#125; else &#123; return \"seed\"; &#125;&#125;;//创建实例function createMsg(title, bodymsg, ico) &#123; var opContent = &#123; body: bodymsg, icon: ico &#125;; var newMsg = new Notification(title, opContent) //延时创建实例---避免因为网速获取任务量失败; &#125;//创建按钮function createButton(idclose, idopen) &#123; //创建关闭按钮 var tButton = document.createElement(\"button\"); tButton.id = idclose; tButton.style.width = \"120px\"; tButton.style.height = \"50px\"; tButton.style.position = \"fixed\" tButton.style.right = \"0\"; tButton.style.bottom = \"50%\"; tButton.innerText = \"关闭浮窗通知\"; tButton.style.opacity = \"0.7\"; tButton.style.backgroundColor = \"whitesmoke\"; tButton.style.borderRadius = \"10px\"; tButton.style.border = \"none\"; document.getElementsByClassName(\"page-header-fixed\")[0].appendChild(tButton); //创建开始按钮 var tsButton = document.createElement(\"button\"); tsButton.id = idopen; tsButton.style.width = \"120px\"; tsButton.style.height = \"50px\"; tsButton.style.position = \"fixed\" tsButton.style.right = \"0\"; tsButton.style.bottom = \"50%\"; tsButton.innerText = \"开启浮窗通知\"; tsButton.style.opacity = \"0.7\"; tsButton.style.backgroundColor = \"whitesmoke\"; tsButton.style.borderRadius = \"10px\"; tsButton.style.border = \"none\"; tsButton.style.display = \"none\"; document.getElementsByClassName(\"page-header-fixed\")[0].appendChild(tsButton); document.getElementById(idopen).onclick = function() &#123; console.log(\"open\"); timers = setInterval(startNotification, 60000); document.title=\"通知已开启\"; tsButton.style.display = \"none\"; tButton.style.display = \"block\"; &#125; document.getElementById(idclose).onclick = function() &#123; clearInterval(timers); document.title=\"通知已关闭\"; this.style.display = \"none\"; tsButton.style.display = \"block\"; console.log(\"close\"); &#125;&#125;//(c) Copyright 2016-07-17 远浅. All Rights Reserved. 参考链接：ＭＤＮ开发者社区BAIDU搜索私人链接： 远浅 因为有趣所以前端 hexo 文章列表","tags":[{"name":"html5","slug":"html5","permalink":"//unliar.com/tags/html5/"},{"name":"notification","slug":"notification","permalink":"//unliar.com/tags/notification/"},{"name":"chrome&&firefox","slug":"chrome-firefox","permalink":"//unliar.com/tags/chrome-firefox/"}]},{"title":"大好きですよ～","date":"2016-05-24T12:40:06.000Z","path":"2016/05/24/skiiiii/","text":"开心….さようなら。","tags":[{"name":"memory","slug":"memory","permalink":"//unliar.com/tags/memory/"}]},{"title":"毕业第一年已经成了过去","date":"2016-04-28T14:26:14.000Z","path":"2016/04/28/201604work/","text":"4月28，距离五一已经没几天了，我出发之前已经做了决定，这两天还没找到自己想要从事的工作的话，就直接闭关两个月，之后再出来找了。做决定很难，可是什么简单呢？在深圳，身无长技，无依无靠，一个人呆着有时候会觉得心里堵的慌，然后陷入鸵鸟的轮回，把自己的视野遮住，不去看，不去想，可是谁都知道接下来会发生什么。 今天去面试还算顺利，后面的面试直接拒掉了，因为这家是it公司，喜欢那种感觉，活力满满啊~总算是实现了自己当初在微博说想去互联网公司的壮言，可是差了一丢丢，其实我想写代码的。慢慢来…..我不能急…Coding暂时当爱好好了。 面试过蛮多次了，其实也不多，可能就十次吧。心里现在根本没有一点波澜的感觉了，再不是去年的忐忑的我，等待hr的时候，心里像一湖静水，这就是迷之自信？hr问我，我第一份工作得到了什么，我一愣，我得到什么了….，只是安安全全的在这个大城市里活了下来，陪着人海，举目无亲。 得到了微薄的能让我不是那么让我心慌的一点钱，我悠悠闲闲的找了大半个月工作，仍然可以做出抉择的能力；还有一点自信，自信自己不会在这个城市活不下去，只要我愿意；我还得到了胆敢去预知未来的魄力，假如我按照一定的轨迹这样下去，我的未来是怎么样子，以前大学的时候无忧无虑，现在生活不得不让你去预知未来，是好是坏呢？ 几个Hr说，我看起来太安静了，我总是无奈的耸耸肩，笑笑：性格如此，比较温和。早就接受了这样的自己啊，不然，每个人都那么活泼，总得有人衬托。我偶尔也会偷笑，现在我只是看起来温和了呀，第一次来深圳去面试的我是个什么样子了，迷迷糊糊，样子应该看起来也不是很阳光，甚至都不太敢只是别人的眼神。也许用我之前同学的话来说就是“猥琐”吧，哈哈哈哈…那时候我居然生气了，我那迷糊的大学两年半吖。想想真是唏嘘，之前心里还满腹怨恨，为什么会来到这个学校，穷山沟，可是毕业之后的某一天突然想起，我给我身边的人带来了什么，真是很抱歉，没给舍友们一个积极向上的环境，活在自己的世界里，其实自己也给你们造成了负面影响，拖了你们后腿，真的非常非常抱歉，本来可以一起做的更好一点的对吗。 其实有些话应当当面说，发现自己对不起的人实在太多，道歉不过来了….. 也感谢你们一路一起走过，我们还会再见面吗？ 提笔于：2016-04-28 22:26:14，落笔于23:35","tags":[{"name":"job","slug":"job","permalink":"//unliar.com/tags/job/"},{"name":"career change","slug":"career-change","permalink":"//unliar.com/tags/career-change/"},{"name":"IT","slug":"IT","permalink":"//unliar.com/tags/IT/"},{"name":"new","slug":"new","permalink":"//unliar.com/tags/new/"}]},{"title":"高级程序设计笔记本","date":"2016-04-25T12:44:39.000Z","path":"2016/04/25/web-developer/","text":"第四章 基本类型值基本类型值是指简单的数据段：undefined、null、Boolean、number、string。不能用.添加属性 引用类型值是指可能由多个值构成的对象。可以添加属性值。 传递参数函数的参数都是按值传递，基本类型的值和基本类型的变量复制一样，而引用类型的值如同引用类型的复制一样传递基本类型的值时，传递的值会被复制给一个局部变量，假如重写局部对象，则这个局部变量就是局部对象，而非全局，所以在函数执行完毕会被销毁。 function setName(obj){ obj.name=&quot;远浅&quot;; obj=new Object(); obj.name=&quot;远浅是猪&quot;; alert(obj.name);//远浅是猪 } var person=new Object(); setName(person); alert(person.name)//远浅 作用域 var color=&quot;black&quot;; function change(){ if (color==&quot;black&quot;) { color=&quot;red&quot; } else{ color=&quot;blue&quot;//内部未声明，所以全局 } } change(); alert(color);","tags":[{"name":"web","slug":"web","permalink":"//unliar.com/tags/web/"},{"name":"notes","slug":"notes","permalink":"//unliar.com/tags/notes/"},{"name":"javascript","slug":"javascript","permalink":"//unliar.com/tags/javascript/"},{"name":"books","slug":"books","permalink":"//unliar.com/tags/books/"}]},{"title":"天不生人上之人，亦不生人下之人","date":"2016-04-25T09:43:26.000Z","path":"2016/04/25/tokyo/","text":"福泽谕吉 劝学篇 听说有部日剧终于走进中国电影院了，心里总想着什么时候去看看，上周末由于天气等等原因，未能成行其实就是一个人看电影总归是有点怪怪的，虽然出校门以来，一个人看过不少了。今天没面试，所以出去瞧瞧吧~ 不得不说就算只是出去走走也还是比自己一个人呆在房间里要开心的多呀，当然其实更多的是来自电影本身。 电影本身是很简单的，可是还是不得不佩服日本人讲故事的能力，能把看起来简单的故事讲述的那么精彩，当然假如只是故事精彩，那这碗鸡汤可能不那么值得我们去品尝，沙耶加的妈妈和坪田老师的教育观念则给了我们充足的理由为电影本身买单，影片中和沙耶加的爸爸学校的老师教育理念的冲突也给我们带来了值得深思的地方。在现实世界里，沙耶加爸爸和学校的老师可能是现实的缩影。不断的被否定、不被重视、被嘲笑，你有过这样的经历了吗？日剧的看点就在此，假如没有产生共鸣，类似的影片就没有必要买单了，我不是指谁，我是说上映的大部分国产青春片不值得一张票钱。 明知鸡汤电影最后结局会是沙耶加会考上庆应大学，还是觉得很激动，很为沙耶加开心，很为剧中所有人有过的努力开心，所有的冲突都在最后一刻得意释解开来，happy endings~ 可是想想现实，你的思绪被立马拉回来。 现在，你身边还有人会相信你身上的无限可能吗？ 你曾经有过奋斗然后值得骄傲的那一段回忆吗？ 你以后会相信并且鼓励别人去实现自己的一切可能吗?","tags":[{"name":"japan","slug":"japan","permalink":"//unliar.com/tags/japan/"},{"name":"film","slug":"film","permalink":"//unliar.com/tags/film/"}]},{"title":"工作","date":"2016-04-24T08:45:22.000Z","path":"2016/04/24/findejob/","text":"不小了 从最开始乐观的想要转行做技术类的工作，突然发现自己确实还存在不足之处。没有项目经验，没有学校里那种不浮躁的环境，满眼都是自己。 时间越是拖的久，心里越是慌张，突然想起同事的建议，先找工作再辞职，建议确实不错，可是我等不了了，很感谢你们。 我今年二十三了。 未来会更好吗？ 深圳天气一直都不好，什么时候还能出去玩呢。","tags":[{"name":"job","slug":"job","permalink":"//unliar.com/tags/job/"},{"name":"future","slug":"future","permalink":"//unliar.com/tags/future/"}]},{"title":"自知的智慧","date":"2016-04-23T08:56:14.000Z","path":"2016/04/23/afterten5/","text":"给我力量，去接受那些我无法改变的事情； 给我勇气，去改变那些我可以改变的事情； 给我智慧去看清两者之间的差别。 Grant me the strength to accept the things that I cannot change, the courage to change the things I can and the wisdom to know the difference.","tags":[{"name":"power","slug":"power","permalink":"//unliar.com/tags/power/"}]},{"title":"泉州","date":"2016-04-23T08:54:09.000Z","path":"2016/04/23/afterten4/","text":"今天终结忐忑的买到了回程票，可以安心的出发啦~ 我只是想出去逛逛 呆在深圳太无聊了 即将失业 即将踏上新的旅程 海上丝绸之路的起点 泉州~ 最后还是取消了 毕竟只是不想一个人呆着 有人一起的话 应该会比一个人开心吧 事实的确如此","tags":[{"name":"traveling","slug":"traveling","permalink":"//unliar.com/tags/traveling/"}]},{"title":"骑士宣言","date":"2016-04-23T08:53:02.000Z","path":"2016/04/23/aftertenthree/","text":"I will be kind to the weak. I will be brave against the strong. I will fight all who do wrong. I will fight for those who cannot fight I will help those who call me for help. I will harm no woman. I will help my brother knight. I will be true to my friends. I will be faithful in love.","tags":[{"name":"english","slug":"english","permalink":"//unliar.com/tags/english/"}]},{"title":"人之常情","date":"2016-04-23T08:51:07.000Z","path":"2016/04/23/aftertentwo/","text":"熬夜到今天凌晨的五点才看完，7点又被闹钟叫醒，迷迷糊糊的坐车到公司，哦！不！站着到公司。头一次见到起得这么早的孕妇。然后售票员说谢谢，奇怪的世界，并不需要逻辑。我好困啊！ 哭不丢脸啦 反正没人看见 嘻嘻嘻嘻 情感这东西 不是谁都有的么","tags":[{"name":"feelings","slug":"feelings","permalink":"//unliar.com/tags/feelings/"}]},{"title":"致十年后的我","date":"2016-04-23T08:45:49.000Z","path":"2016/04/23/afterten/","text":"好きな人と歩いた場所も 曾和喜欢的人走过的地方 その時見た景色も 那时候看过的景色 振り返らず 今を駆け抜け 统统抛掉，不再回头，全力飞奔 私は何と出会うの 我将会遇见些什么呢 立ち止まるほど 驻足不前 意味を問うほど 探索意义 きっとまだ大人ではなくて 一定是我还不够成熟 今見てるもの 现在看到的事物 今出会う人 现在遇见的人 その中でただ前だけを見てる 在这纷杂喧嚣之中，只会看着前方 10年後の私へ 致10年后的我 今は幸せでしょうか 现在的你，幸福吗 それとも悲しみで 还是正沉浸在悲伤中 泣いているのでしょうか 默默的流着眼泪 けどあなたの傍に 不过在你的身边 変わらないものがあり 依然会有不变的存在 気付いていないだけで 未能察觉的你 守られていませんか 依然被守护着吧 過ぎし日々に 想いを预け 把思念寄托于流逝的日子里 時間だけ ただ追いかけてく 只有时间在不停的追赶 背に寄り添った 誰かの夢に 托付在我背上的，是谁的梦想 振り向ける日がいつか来るのかな 总有一天必须要面对的吧 10年後の私へ 致10年后的我 今は誰を好きですか 现在的你，喜欢着谁呢 それとも変わらずに 还是和以前一样 あの人が好きですか 继续喜欢着那个人呢 けどいつか 不过，现在的你 知らない誰かを爱する前に 在爱上某个人之前 自分のことを好きと 喜欢自己这句话 言えるようになれましたか 能否先说出来呢 大切な人たちは 所珍爱的朋友们 今も変わらずいますか 依然在重复平凡的生活吗 それとも遠く離れ 还是已经远离了 それぞれ歩んでいますか 踏上了各自的旅途 けど そんな出会いを 但是，在重复着无数次的相遇 别れを 缲り返して 和离别之后 今の私よりも 是否比现在的我 すてきになっていますか 更有魅力呢 10年後の私へ 致10年后的我 今がもし幸せなら 如果现在的你是幸福的 あの日の私のこと 过往日子的我 思い出してくれますか 能否请你想起来呢 そこにはつらいことに 回忆中的我 泣いた私がいるけど 一定在伤心的哭泣吧 その涙を優しく 请将这温柔的泪水 思い出に変えてください 融入记忆的海洋","tags":[{"name":"for me afer ten years","slug":"for-me-afer-ten-years","permalink":"//unliar.com/tags/for-me-afer-ten-years/"}]},{"title":"我们都是过客","date":"2016-04-23T08:37:19.000Z","path":"2016/04/23/ipast/","text":"好几天没有刷朋友圈，刚看到，发现大家都在渐行渐远。感到有点失落。林琳说女生之间的友谊很奇怪，就是这样会慢慢淡去。我有点恐慌。我的世界里有的是新的朋友，你的世界也是一样。交集变少，交谈变少，会成为最熟悉的陌生人么？我在努力结交新的朋友，很费力也很为难，成年人的世界并没有时间来认识，了解与深交；看着你在不断的认识新的朋友，有点空。—谭湘娟 我一个人在这个城市里游走的某一刻突然愣了下，我过去所认识的人和我现在在路上擦肩而过的人又有什么区别呢？我心思游离了一路，最后无奈的得出的结论是： 没有本质上的区别。 我并不知道你们的社交圈是什么样子，我只知道我自己，毕业季就意味着有一大批人从此消失在我的世界里。假如有一天我在看见墓碑上刻着我曾熟知的名字，脑海里回忆起的是最后一次见你的样子。很可惜，并不是所有人我都能想起来，甚至于根本就没多大印象了，有印象的大都是我经常想起或者最近见过的人。曾经的同学，有过不短接触的人从转身的那一刻起再无交集，有的也许会强行出现在你的社交圈里，沉寂的大多数，和陌生人又有什么区别呢？ 我们陪彼此走过一段比路人比肩而过更漫长的旅程，可是我们之间仅仅如此而已了，量变并没有引发任何质变。假如有人提起你和我，大概就是：你们做过三年的同学呢！除此之外…… 社交圈大部分人都在自说自话，只得苦笑，也许只有这样强行出镜才能让我想起你，有时候甚至都不用强行，只用屏蔽你就能把你抹去，还真是一场非常不正式的道别。 好没有逻辑的文字，我应该努力证明：那些从不联系的人和路人之间并没有本质的区别这个论点。但是最后 我只想说谢谢你们陪我路过，不说了。 想见又想见你，还真是很……怎么说呢。 人贵有自知 被拒绝很伤呢，毕竟自尊心低。 人一旦主动，就把权力移交到对方手里。 生或者死。 你猜呢~","tags":[{"name":"past","slug":"past","permalink":"//unliar.com/tags/past/"}]},{"title":"Night watcher swear","date":"2016-04-23T08:22:06.000Z","path":"2016/04/23/tenyear/","text":"“Night gathers, and now my watch begins. It shall not end until my death. I shall take no wife, hold no lands, father no children. I shall wear no crowns and win no glory. I shall live and die at my post. I am the sword in the darkness. I am the watcher on the walls. I am the fire that burns against the cold, the light that brings the dawn, the horn that wakes the sleepers, the shield that guards the realms of men. I pledge my life and honor to the Night’s Watch, for this night and all the nights to come.” …………………………………………………………………………… 守夜人誓言 长夜将至，我从今开始守望，至死方休。 我将不娶妻、不封地、不生子。 我将不戴宝冠，不争荣宠。 我将尽忠职守，生死於斯。 我是黑暗中的利剑， 长城上的守卫。 我是抵御寒冷的烈焰， 破晓时分的光线， 唤醒眠者的号角， 守护王国的坚盾。 我将生命与荣耀献给守夜人， 今夜如此，夜夜皆然。","tags":[{"name":"english","slug":"english","permalink":"//unliar.com/tags/english/"}]}]